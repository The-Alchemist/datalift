<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="datalift-wrapper" default="dist" basedir=".">

  <!-- ================ Property Definitions ============================== -->

  <!--
    Each of the following properties are used in the build script.
    Values for these properties are set by the first place they are
    defined, from the following list:

     * Definitions on the "ant" command line (ant -Dfoo=bar compile).

     * Definitions from a "build.properties" file in the top level
       source directory of this application.

     * Definitions from a "csrp.build.properties" file in the developer's
       home directory.

     * Default definitions in this build.xml file.

    You will note below that property values can be composed based on
    the contents of previously defined properties.  This is a powerful
    technique that helps you minimize the number of changes required
    when your development environment is modified.  Note that property
    composition is allowed within "build.properties" files as well as
    in the "build.xml" script.
   -->

  <property file="${user.home}/datalift-build.properties"/>
  <property file="build.properties"/>


  <!-- ================ File and Directory Names ========================== -->

  <!--
    These properties generally define file and directory names (or paths)
    that affect where the build process stores its outputs.

    app.name            Base name of this application, used to
                        construct filenames and directories.
                        Defaults to "myapp".

    app.version         Version number of this iteration of the application.

    build.home          The directory into which the "prepare" and
                        "compile" targets will generate their output.
                        Defaults to "build".

    catalina.home       The directory in which you have installed
                        a binary distribution of Tomcat.  This will
                        be used by the "deploy" target.
   -->

  <property name="app.name"             value="datalift-wrapper"/>
  <property name="app.long.name"        value="${app.name}"/>

  <property name="build.home"           location="${basedir}/build"/>
  <property name="dist.home"            location="${basedir}/dist"/>
  <property name="src.home"             location="${basedir}/src/java"/>

  <property name="lib.home"             location="${basedir}/lib"/>
  <property name="run.lib.home"         location="${lib.home}/runtime"/>

  <property name="classes.dir"          location="${build.home}/classes"/>

  <property name="conf.home"            location="${basedir}/conf"/>
  <property name="runtime.conf"         location="${conf.home}/runtime"/>
  <property name="webapp.conf"          location="${conf.home}/webapp"/>

  <property name="core.home"            location="${basedir}/../core"/>
  <property name="datalift.war.name"    value="datalift.war"/>
  <property name="datalift.war.path"
            location="${core.home}/dist/${datalift.war.name}"/>


  <!-- ================ Compilation Control Options ======================= -->

  <!--
    These properties control option settings on the Javac compiler when it
    is invoked using the <javac> task.
     - compile.debug        Should compilation include the debug option?
     - compile.deprecation  Should compilation include the deprecation option?
     - compile.optimize     Should compilation include the optimize option?
   -->

  <property name="compile.debug"        value="true"/>
  <property name="compile.deprecation"  value="false"/>
  <property name="compile.optimize"     value="false"/>


  <!-- ================ Compilation Classpath ============================= -->

  <!--
    Rather than relying on the CLASSPATH environment variable, Ant includes
    features that makes it easy to dynamically construct the classpath you
    need for each compilation.  The example below constructs the compile
    classpath to include the servlet.jar file, as well as the other components
    that Tomcat makes available to web applications automatically, plus
    anything that you explicitly added.
   -->

  <path id="runtime.classpath">
    <fileset dir="${run.lib.home}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <path id="compile.classpath">
    <!-- Runtime libraries -->
    <path refid="runtime.classpath"/>
  </path>

  <path id="tests.classpath">
    <!-- Project and test classes -->
    <pathelement location="${classes.dir}"/>
    <!-- Runtime libraries -->
    <path refid="runtime.classpath"/>
  </path>


  <!-- ================ All Target ======================================== -->

  <!--
    The "all" target is a shortcut for running the "clean" target followed
    by the "run" target, to force a complete recompile and test run.
   -->

  <target name="all" depends="clean,dist"
          description="Cleans build directory, then rebuilds distribution"/>


  <!-- ================ Clean Target ====================================== -->

  <!--
    The "clean" target deletes any previous "build" directory,
    so that you can be ensured the application can be built from scratch.
   -->

  <target name="clean" depends="init" description="Deletes build directory">
    <delete dir="${dist.home}"/>
    <delete dir="${build.home}"/>
  </target>


  <!-- ================ Prepare Target ==================================== -->

  <!--
    The "prepare" target is used to create the "build" destination directory,
    and copy the static contents of your web application to it.  If you need
    to copy static files from external dependencies, you can customize the
    contents of this task.

    Normally, this task is executed indirectly when needed.
   -->

  <target name="init">
    <tstamp/>
  </target>

  <target name="prepare" depends="init">
    <!-- Create build directories as needed -->
    <mkdir dir="${build.home}"/>
    <!-- Create compilation target directory -->
    <mkdir dir="${classes.dir}"/>
  </target>


  <!-- ================ Compile Target ==================================== -->

  <!--
    The "compile" target transforms source files (from your "src" directory)
    into object files in the appropriate location in the build directory.
    This example assumes that you will be including your classes in an
    unpacked directory hierarchy under "/WEB-INF/classes".
   -->

  <target name="compile" depends="prepare"
                         description="Compiles Java sources">

    <!-- Compile Java classes as necessary -->
    <javac srcdir="${src.home}"
          destdir="${classes.dir}"
            debug="${compile.debug}"
      deprecation="${compile.deprecation}"
         optimize="${compile.optimize}">
      <classpath refid="compile.classpath"/>
    </javac>

    <!-- Copy application resources -->
    <copy todir="${classes.dir}" includeEmptyDirs="false"
                                 preservelastmodified="true">
      <fileset dir="${src.home}" excludes="**/*.java,**/*.html,**/.*"/>
    </copy>
  </target>


  <!-- ================ Distribution Target =============================== -->

  <target name="prepare-dist" depends="prepare">
    <mkdir dir="${dist.home}"/>
    <!-- Copy runtime directory structure -->
    <copy todir="${dist.home}/bin" flatten="true" preservelastmodified="true">
      <fileset dir="${run.lib.home}">
        <include name="**/*.jar"/>
      </fileset>
    </copy>
    <!-- Copy wrapper runtime dependencies -->
    <copy todir="${dist.home}" preservelastmodified="true">
      <fileset dir="${runtime.conf}"/>
    </copy>
    <!-- Copy DataLift main web application -->
    <copy file="${datalift.war.path}" todir="${dist.home}/webapps"/>
    <!-- Patch DataLift webapp to install standalon app. security config. -->
    <jar jarfile="${dist.home}/webapps/${datalift.war.name}" update="true">
      <fileset dir="${webapp.conf}"/>
    </jar>
  </target>

  <!--
    The "dist" target creates a binary distribution of your application
    in a directory structure ready to be archived in a jar, war, ear,
    tar.gz or zip file.
    Note that this target depends on two other targets:
      - "compile" to build the the entire web application (including
        external dependencies);
      - "prepare-dist" to prepare web application configuration for
        deployement.
   -->

  <target name="dist" depends="compile,prepare-dist"
                      description="Creates a binary distribution">

    <pathconvert property="jar.classpath"
                    refid="runtime.classpath" pathsep=" ">
      <flattenmapper/>
    </pathconvert>

    <jar jarfile="${dist.home}/bin/${app.name}.jar">
      <fileset dir="${classes.dir}"/>
      <manifest>
        <attribute name="Main-Class" value="org.datalift.wrapper.Wrapper"/>
        <attribute name="Class-Path" value="${jar.classpath}"/>
      </manifest>
    </jar>

  </target>


  <!-- ================ Helper Targets ==================================== -->

  <!--
    The "debug" target lists the build configuration.
   -->

  <target name="debug" depends="init"
                       description="Lists the build configuration">

    <echo message="Build properties:"/>
    <echo message=""/>
    <echo message=" - Application configuration:"/>
    <echo message="   - app.name            = ${app.name}"/>
    <echo message="   - app.long.name       = ${app.long.name}"/>
    <echo message=""/>
    <echo message=" - Generation options:"/>
    <echo message="   - compile.debug       = ${compile.debug}"/>
    <echo message="   - compile.deprecation = ${compile.deprecation}"/>
    <echo message="   - compile.optimize    = ${compile.optimize}"/>
    <echo message=""/>
    <echo message=" - Build environment:"/>
    <echo message="   - basedir             = ${basedir}"/>
    <echo message="   - build.home          = ${build.home}"/>
    <echo message="   - user.home           = ${user.home}"/>
    <echo message=""/>

  </target>

</project>

